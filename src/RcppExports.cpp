// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// cp_run
NumericVector cp_run(NumericVector my_time_series_raw, int my_time_series_len, int my_time_series_d, int my_min_segment_size, double my_pt, bool my_is_Euclidean_distance, NumericVector my_dist_raw, int my_block_size, NumericVector my_change_point_set_raw, NumericVector my_change_point_num_raw, char method);
RcppExport SEXP _CP_cp_run(SEXP my_time_series_rawSEXP, SEXP my_time_series_lenSEXP, SEXP my_time_series_dSEXP, SEXP my_min_segment_sizeSEXP, SEXP my_ptSEXP, SEXP my_is_Euclidean_distanceSEXP, SEXP my_dist_rawSEXP, SEXP my_block_sizeSEXP, SEXP my_change_point_set_rawSEXP, SEXP my_change_point_num_rawSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type my_time_series_raw(my_time_series_rawSEXP);
    Rcpp::traits::input_parameter< int >::type my_time_series_len(my_time_series_lenSEXP);
    Rcpp::traits::input_parameter< int >::type my_time_series_d(my_time_series_dSEXP);
    Rcpp::traits::input_parameter< int >::type my_min_segment_size(my_min_segment_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type my_pt(my_ptSEXP);
    Rcpp::traits::input_parameter< bool >::type my_is_Euclidean_distance(my_is_Euclidean_distanceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type my_dist_raw(my_dist_rawSEXP);
    Rcpp::traits::input_parameter< int >::type my_block_size(my_block_sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type my_change_point_set_raw(my_change_point_set_rawSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type my_change_point_num_raw(my_change_point_num_rawSEXP);
    Rcpp::traits::input_parameter< char >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(cp_run(my_time_series_raw, my_time_series_len, my_time_series_d, my_min_segment_size, my_pt, my_is_Euclidean_distance, my_dist_raw, my_block_size, my_change_point_set_raw, my_change_point_num_raw, method));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CP_cp_run", (DL_FUNC) &_CP_cp_run, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_CP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
